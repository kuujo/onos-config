/*
Copyright 2019-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

// Package admin defines the administrative and diagnostic gRPC interfaces.
package proto;

import "google/protobuf/timestamp.proto";
import "github.com/openconfig/gnmi/proto/gnmi/gnmi.proto";
import "pkg/northbound/proto/diags.proto";

// NetworkChangesRequest is a message for specifying GetNetworkChanges query parameters.
message NetworkChangesRequest {
}

// ConfigChange is a descriptor of a submitted configuration change targeted as a single device.
message ConfigChange {
    string id = 1;
    string hash = 2;
}

// NetChange is a descriptor of a configuration change submitted via gNMI.
message NetChange {
    google.protobuf.Timestamp time = 1;
    string name = 2;
    string user = 3;
    repeated ConfigChange changes = 4;
}

message ReadOnlySubPath {
    string subpath = 1;
    ChangeValueType valueType = 2; // from diags.proto
}

message ReadOnlyPath {
    string path = 1;
    repeated ReadOnlySubPath subpath = 2;
}

message ReadWritePath {
    string path = 1;
    ChangeValueType valueType = 2; // from diags.proto
    string units = 3;
    string description = 4;
    bool mandatory = 5;
    string default = 6;
    repeated string range = 7;
    repeated string length = 8;
}

message ModelInfo {
    string name = 1;
    string version = 2;
    repeated gnmi.ModelData modelData = 3;
    string module = 4;
    repeated ReadOnlyPath readOnlyPath = 7; // 5 and 6 were used previously
    repeated ReadWritePath readWritePath = 8;
}

// RegisterRequest carries data for registering a YANG model.
message RegisterRequest {
    // Full path and filename of a shared object library as a model plugin
    string soFile = 1;
}

message SchemaEntry {
    string schemaPath = 1;
    string schemaJson = 2;
}

// RegisterResponse carries status of YANG model registration.
message RegisterResponse {
    string name = 1;
    string version = 2;
}

// ListModelsRequest carries data for querying registered models.
message ListModelsRequest {
    bool verbose = 1;
    string modelName = 2; // If blank all are listed
    string modelVersion = 3; // If blank all are listed
}

// RollbackRequest carries the name of a network config to rollback. If there
// are subsequent changes to any of the devices in that config, the rollback will
// be rejected. If no name is given the last network change will be rolled back.
message RollbackRequest {
    string name = 1;
    string comment = 2;
}

message RollbackResponse {
    string message = 1;
}

// ConfigAdminService provides means for enhanced interactions with the configuration subsystem.
service ConfigAdminService {
    // RegisterModel adds the specified YANG model to the list of supported models.
    // There is no unregister because once loaded plugins cannot be unloaded
    rpc RegisterModel (RegisterRequest) returns (RegisterResponse);

    // ListRegisteredModels returns a stream of registered models.
    rpc ListRegisteredModels (ListModelsRequest) returns (stream ModelInfo);

    // GetNetworkChanges returns a stream of network changes submitted via gNMI.
    rpc GetNetworkChanges (NetworkChangesRequest) returns (stream NetChange);

    // RollbackNetworkChange rolls back the specified network change (or the latest one).
    rpc RollbackNetworkChange (RollbackRequest) returns (RollbackResponse);
}
