// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/types/device/change/types.proto

package change

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_onosproject_onos_config_pkg_types "github.com/onosproject/onos-config/pkg/types"
	github_com_onosproject_onos_topo_pkg_northbound_device "github.com/onosproject/onos-topo/pkg/northbound/device"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status is the status of a configuration object
type Status int32

const (
	// PENDING indicates the configuration is waiting to be applied
	Status_PENDING Status = 0
	// APPLYING indicates the configuration is in the process of being applied
	Status_APPLYING Status = 1
	// SUCCEEDED indicates the configuration was applied successfully
	Status_SUCCEEDED Status = 2
	// FAILED indicates the configuration failed
	Status_FAILED Status = 3
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "APPLYING",
	2: "SUCCEEDED",
	3: "FAILED",
}

var Status_value = map[string]int32{
	"PENDING":   0,
	"APPLYING":  1,
	"SUCCEEDED": 2,
	"FAILED":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a5e27eecb8997a6, []int{0}
}

// Reason is a failure reason
type Reason int32

const (
	// ERROR indicates an error occurred
	Reason_ERROR Reason = 0
	// UNAVAILABLE indicates the device was unavailable
	Reason_UNAVAILABLE Reason = 1
)

var Reason_name = map[int32]string{
	0: "ERROR",
	1: "UNAVAILABLE",
}

var Reason_value = map[string]int32{
	"ERROR":       0,
	"UNAVAILABLE": 1,
}

func (x Reason) String() string {
	return proto.EnumName(Reason_name, int32(x))
}

func (Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a5e27eecb8997a6, []int{1}
}

// ValueType is the type for a value
type ValueType int32

const (
	ValueType_EMPTY            ValueType = 0
	ValueType_STRING           ValueType = 1
	ValueType_INT              ValueType = 2
	ValueType_UINT             ValueType = 3
	ValueType_BOOL             ValueType = 4
	ValueType_DECIMAL          ValueType = 5
	ValueType_FLOAT            ValueType = 6
	ValueType_BYTES            ValueType = 7
	ValueType_LEAFLIST_STRING  ValueType = 8
	ValueType_LEAFLIST_INT     ValueType = 9
	ValueType_LEAFLIST_UINT    ValueType = 10
	ValueType_LEAFLIST_BOOL    ValueType = 11
	ValueType_LEAFLIST_DECIMAL ValueType = 12
	ValueType_LEAFLIST_FLOAT   ValueType = 13
	ValueType_LEAFLIST_BYTES   ValueType = 14
)

var ValueType_name = map[int32]string{
	0:  "EMPTY",
	1:  "STRING",
	2:  "INT",
	3:  "UINT",
	4:  "BOOL",
	5:  "DECIMAL",
	6:  "FLOAT",
	7:  "BYTES",
	8:  "LEAFLIST_STRING",
	9:  "LEAFLIST_INT",
	10: "LEAFLIST_UINT",
	11: "LEAFLIST_BOOL",
	12: "LEAFLIST_DECIMAL",
	13: "LEAFLIST_FLOAT",
	14: "LEAFLIST_BYTES",
}

var ValueType_value = map[string]int32{
	"EMPTY":            0,
	"STRING":           1,
	"INT":              2,
	"UINT":             3,
	"BOOL":             4,
	"DECIMAL":          5,
	"FLOAT":            6,
	"BYTES":            7,
	"LEAFLIST_STRING":  8,
	"LEAFLIST_INT":     9,
	"LEAFLIST_UINT":    10,
	"LEAFLIST_BOOL":    11,
	"LEAFLIST_DECIMAL": 12,
	"LEAFLIST_FLOAT":   13,
	"LEAFLIST_BYTES":   14,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a5e27eecb8997a6, []int{2}
}

// Change represents a configuration change to a single device
type Change struct {
	// The identifier of the change
	ID ID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ID" json:"id,omitempty"`
	// The ID of the parent NetworkConfig
	ConfigID github_com_onosproject_onos_config_pkg_types.ID `protobuf:"bytes,2,opt,name=config_id,json=configId,proto3,casttype=github.com/onosproject/onos-config/pkg/types.ID" json:"config_id,omitempty"`
	// The configuration revision number
	Revision Revision `protobuf:"varint,3,opt,name=revision,proto3,casttype=Revision" json:"revision,omitempty"`
	// The ID of the device to change
	DeviceID github_com_onosproject_onos_topo_pkg_northbound_device.ID `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3,casttype=github.com/onosproject/onos-topo/pkg/northbound/device.ID" json:"device_id,omitempty"`
	// The version of the device to change
	DeviceVersion string `protobuf:"bytes,5,opt,name=device_version,json=deviceVersion,proto3" json:"device_version,omitempty"`
	// The current status of the configuration
	Status Status `protobuf:"varint,6,opt,name=status,proto3,enum=onos.config.device.change.Status" json:"status,omitempty"`
	// The reason the change failed
	Reason Reason `protobuf:"varint,7,opt,name=reason,proto3,enum=onos.config.device.change.Reason" json:"reason,omitempty"`
	// An optional status message
	Message string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// The time at which the configuration was created
	Created time.Time `protobuf:"bytes,9,opt,name=created,proto3,stdtime" json:"created"`
	// The time at which the configuration was last updated
	Updated time.Time `protobuf:"bytes,10,opt,name=updated,proto3,stdtime" json:"updated"`
	// The values to change
	Values []*Value `protobuf:"bytes,11,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5e27eecb8997a6, []int{0}
}
func (m *Change) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Change.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return m.Size()
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetID() ID {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Change) GetConfigID() github_com_onosproject_onos_config_pkg_types.ID {
	if m != nil {
		return m.ConfigID
	}
	return ""
}

func (m *Change) GetRevision() Revision {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Change) GetDeviceID() github_com_onosproject_onos_topo_pkg_northbound_device.ID {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *Change) GetDeviceVersion() string {
	if m != nil {
		return m.DeviceVersion
	}
	return ""
}

func (m *Change) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *Change) GetReason() Reason {
	if m != nil {
		return m.Reason
	}
	return Reason_ERROR
}

func (m *Change) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Change) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Change) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func (m *Change) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

// Value is an individual Path/Value combination in a Change
type Value struct {
	// path is the path to change
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// value is the value
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// type is the value type
	Type ValueType `protobuf:"varint,3,opt,name=type,proto3,enum=onos.config.device.change.ValueType" json:"type,omitempty"`
	// type_opts is a set of type options
	TypeOpts []int32 `protobuf:"varint,4,rep,packed,name=type_opts,json=typeOpts,proto3" json:"type_opts,omitempty"`
	// removed indicates whether this is a delete
	Removed bool `protobuf:"varint,5,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a5e27eecb8997a6, []int{1}
}
func (m *Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return m.Size()
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Value) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_EMPTY
}

func (m *Value) GetTypeOpts() []int32 {
	if m != nil {
		return m.TypeOpts
	}
	return nil
}

func (m *Value) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func init() {
	proto.RegisterEnum("onos.config.device.change.Status", Status_name, Status_value)
	proto.RegisterEnum("onos.config.device.change.Reason", Reason_name, Reason_value)
	proto.RegisterEnum("onos.config.device.change.ValueType", ValueType_name, ValueType_value)
	proto.RegisterType((*Change)(nil), "onos.config.device.change.Change")
	proto.RegisterType((*Value)(nil), "onos.config.device.change.Value")
}

func init() {
	proto.RegisterFile("pkg/types/device/change/types.proto", fileDescriptor_3a5e27eecb8997a6)
}

var fileDescriptor_3a5e27eecb8997a6 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6f, 0xea, 0x46,
	0x14, 0xc5, 0x7c, 0x18, 0xfb, 0xf2, 0xf1, 0xdc, 0x69, 0x16, 0x6e, 0x5a, 0x01, 0x7d, 0x7d, 0x95,
	0x50, 0xa4, 0xda, 0x12, 0xdd, 0xbc, 0xb7, 0x79, 0x95, 0xc1, 0x4e, 0x65, 0xc9, 0x0f, 0xd0, 0xe0,
	0x44, 0x8a, 0x54, 0x29, 0x32, 0x78, 0x62, 0xdc, 0x3e, 0x18, 0xcb, 0x36, 0x48, 0xf9, 0x05, 0xdd,
	0xe6, 0x37, 0xf4, 0xd7, 0x64, 0x99, 0x65, 0x57, 0xb4, 0x22, 0xeb, 0xfe, 0x81, 0xac, 0xaa, 0x99,
	0x31, 0x48, 0x59, 0x34, 0x51, 0x37, 0x70, 0xe7, 0xf8, 0x9c, 0x7b, 0xcf, 0xcc, 0x3d, 0xf0, 0x5d,
	0xf2, 0x5b, 0x64, 0xe6, 0xb7, 0x09, 0xc9, 0xcc, 0x90, 0x6c, 0xe3, 0x05, 0x31, 0x17, 0xcb, 0x60,
	0x1d, 0x11, 0x81, 0x19, 0x49, 0x4a, 0x73, 0x8a, 0xbe, 0xa2, 0x6b, 0x9a, 0x19, 0x0b, 0xba, 0xbe,
	0x89, 0x23, 0x43, 0xd0, 0x0c, 0x41, 0x3b, 0xed, 0x46, 0x94, 0x46, 0x9f, 0x89, 0xc9, 0x89, 0xf3,
	0xcd, 0x8d, 0x99, 0xc7, 0x2b, 0x92, 0xe5, 0xc1, 0x2a, 0x11, 0xda, 0xd3, 0x93, 0x88, 0x46, 0x94,
	0x97, 0x26, 0xab, 0x04, 0xfa, 0xf6, 0xf7, 0x1a, 0xc8, 0x23, 0xde, 0x01, 0x7d, 0x03, 0xe5, 0x38,
	0xd4, 0xa5, 0x9e, 0xd4, 0x57, 0x87, 0xcd, 0xfd, 0xae, 0x5b, 0x76, 0xed, 0x27, 0xfe, 0x8b, 0xcb,
	0x71, 0x88, 0x7e, 0x01, 0x55, 0xcc, 0xbd, 0x8e, 0x43, 0xbd, 0xcc, 0x49, 0x3f, 0xed, 0x77, 0x5d,
	0x65, 0xc4, 0x41, 0x4e, 0x35, 0xa3, 0x38, 0x5f, 0x6e, 0xe6, 0xc6, 0x82, 0xae, 0x4c, 0x66, 0x34,
	0x49, 0xe9, 0xaf, 0x64, 0x91, 0xf3, 0xfa, 0x07, 0x21, 0x36, 0x8f, 0xb7, 0x34, 0x5c, 0x1b, 0x2b,
	0x02, 0x74, 0x43, 0xd4, 0x07, 0x25, 0x25, 0xdb, 0x38, 0x8b, 0xe9, 0x5a, 0xaf, 0xf4, 0xa4, 0x7e,
	0x75, 0xd8, 0x7c, 0xda, 0x75, 0x15, 0x5c, 0x60, 0xf8, 0xf8, 0x15, 0xdd, 0x80, 0x2a, 0x2e, 0xce,
	0x7c, 0x54, 0xb9, 0x0f, 0x97, 0xf9, 0xb0, 0x39, 0xc8, 0x7d, 0x7c, 0x78, 0xc9, 0x47, 0x4e, 0x13,
	0xca, 0x5d, 0xac, 0x69, 0x9a, 0x2f, 0xe7, 0x74, 0xb3, 0x0e, 0x8b, 0x07, 0xe7, 0x8e, 0x44, 0xe9,
	0x86, 0xe8, 0x7b, 0x68, 0x17, 0x73, 0xb6, 0x24, 0xe5, 0xbe, 0x6a, 0x6c, 0x18, 0x6e, 0x09, 0xf4,
	0x52, 0x80, 0xe8, 0x03, 0xc8, 0x59, 0x1e, 0xe4, 0x9b, 0x4c, 0x97, 0x7b, 0x52, 0xbf, 0x3d, 0xf8,
	0xd6, 0xf8, 0xcf, 0x15, 0x19, 0x33, 0x4e, 0xc4, 0x85, 0x80, 0x49, 0x53, 0x12, 0x64, 0x74, 0xad,
	0xd7, 0x5f, 0x95, 0x62, 0x4e, 0xc4, 0x85, 0x00, 0xe9, 0x50, 0x5f, 0x91, 0x2c, 0x0b, 0x22, 0xa2,
	0x2b, 0xdc, 0xd5, 0xe1, 0x88, 0x3e, 0x42, 0x7d, 0x91, 0x92, 0x20, 0x27, 0xa1, 0xae, 0xf6, 0xa4,
	0x7e, 0x63, 0x70, 0x6a, 0x88, 0x60, 0x18, 0x87, 0x60, 0x18, 0xfe, 0x21, 0x18, 0x43, 0xe5, 0x7e,
	0xd7, 0x2d, 0xdd, 0xfd, 0xd5, 0x95, 0xf0, 0x41, 0xc4, 0xf4, 0x9b, 0x24, 0xe4, 0x7a, 0xf8, 0x3f,
	0xfa, 0x42, 0x84, 0xde, 0x83, 0xbc, 0x0d, 0x3e, 0x6f, 0x48, 0xa6, 0x37, 0x7a, 0x95, 0x7e, 0x63,
	0xd0, 0x7b, 0xe1, 0x52, 0x97, 0x8c, 0x88, 0x0b, 0xfe, 0xdb, 0x3f, 0x24, 0xa8, 0x71, 0x04, 0x21,
	0xa8, 0x26, 0x41, 0xbe, 0x14, 0x51, 0xc4, 0xbc, 0x46, 0x27, 0x50, 0xe3, 0x3c, 0x1e, 0xbd, 0x26,
	0x16, 0x07, 0xf4, 0x1e, 0xaa, 0x2c, 0x4c, 0x3c, 0x32, 0xed, 0xc1, 0xbb, 0xd7, 0x66, 0xf9, 0xb7,
	0x09, 0xc1, 0x5c, 0x81, 0xbe, 0x06, 0x95, 0xfd, 0x5f, 0xd3, 0x24, 0xcf, 0xf4, 0x6a, 0xaf, 0xd2,
	0xaf, 0x61, 0x85, 0x01, 0x93, 0x24, 0xcf, 0xd8, 0xf3, 0xa6, 0x64, 0x45, 0xb7, 0x24, 0xe4, 0x4b,
	0x57, 0xf0, 0xe1, 0x78, 0xf6, 0x11, 0x64, 0xb1, 0x45, 0xd4, 0x80, 0xfa, 0xd4, 0x19, 0xdb, 0xee,
	0xf8, 0x67, 0xad, 0x84, 0x9a, 0xa0, 0x58, 0xd3, 0xa9, 0x77, 0xc5, 0x4e, 0x12, 0x6a, 0x81, 0x3a,
	0xbb, 0x18, 0x8d, 0x1c, 0xc7, 0x76, 0x6c, 0xad, 0x8c, 0x00, 0xe4, 0x73, 0xcb, 0xf5, 0x1c, 0x5b,
	0xab, 0x9c, 0xbd, 0x03, 0x59, 0xac, 0x12, 0xa9, 0x50, 0x73, 0x30, 0x9e, 0x60, 0xad, 0x84, 0xde,
	0x40, 0xe3, 0x62, 0x6c, 0x5d, 0x5a, 0xae, 0x67, 0x0d, 0x3d, 0x47, 0x93, 0xce, 0xfe, 0x91, 0x40,
	0x3d, 0x1a, 0xe6, 0xcc, 0x4f, 0x53, 0xff, 0x4a, 0x2b, 0xb1, 0x56, 0x33, 0x1f, 0x8b, 0x29, 0x75,
	0xa8, 0xb8, 0x63, 0x5f, 0x2b, 0x23, 0x05, 0xaa, 0x17, 0xac, 0xaa, 0xb0, 0x6a, 0x38, 0x99, 0x78,
	0x5a, 0x95, 0xb9, 0xb3, 0x9d, 0x91, 0xfb, 0xc9, 0xf2, 0xb4, 0x1a, 0x6b, 0x70, 0xee, 0x4d, 0x2c,
	0x5f, 0x93, 0x59, 0x39, 0xbc, 0xf2, 0x9d, 0x99, 0x56, 0x47, 0x5f, 0xc2, 0x1b, 0xcf, 0xb1, 0xce,
	0x3d, 0x77, 0xe6, 0x5f, 0x17, 0x4d, 0x15, 0xa4, 0x41, 0xf3, 0x08, 0xb2, 0x9e, 0x2a, 0xfa, 0x02,
	0x5a, 0x47, 0x84, 0x8f, 0x81, 0x67, 0x10, 0x9f, 0xd7, 0x40, 0x27, 0xa0, 0x1d, 0xa1, 0xc3, 0xe0,
	0x26, 0x42, 0xd0, 0x3e, 0xa2, 0xc2, 0x41, 0xeb, 0x19, 0x26, 0xac, 0xb4, 0x87, 0xfa, 0xfd, 0xbe,
	0x23, 0x3d, 0xec, 0x3b, 0xd2, 0xdf, 0xfb, 0x8e, 0x74, 0xf7, 0xd8, 0x29, 0x3d, 0x3c, 0x76, 0x4a,
	0x7f, 0x3e, 0x76, 0x4a, 0x73, 0x99, 0xa7, 0xee, 0xc7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x44,
	0x7c, 0xe5, 0x52, 0x1e, 0x05, 0x00, 0x00,
}

func (m *Change) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Change) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Change) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.Reason != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DeviceVersion) > 0 {
		i -= len(m.DeviceVersion)
		copy(dAtA[i:], m.DeviceVersion)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeviceVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceID) > 0 {
		i -= len(m.DeviceID)
		copy(dAtA[i:], m.DeviceID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.DeviceID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Revision != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConfigID) > 0 {
		i -= len(m.ConfigID)
		copy(dAtA[i:], m.ConfigID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ConfigID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Removed {
		i--
		if m.Removed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TypeOpts) > 0 {
		dAtA4 := make([]byte, len(m.TypeOpts)*10)
		var j3 int
		for _, num1 := range m.TypeOpts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Change) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ConfigID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovTypes(uint64(m.Revision))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.DeviceVersion)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Reason != 0 {
		n += 1 + sovTypes(uint64(m.Reason))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if len(m.TypeOpts) > 0 {
		l = 0
		for _, e := range m.TypeOpts {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if m.Removed {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Change) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Change: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Change: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigID = github_com_onosproject_onos_config_pkg_types.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= Revision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = github_com_onosproject_onos_topo_pkg_northbound_device.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= Reason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TypeOpts = append(m.TypeOpts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TypeOpts) == 0 {
					m.TypeOpts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TypeOpts = append(m.TypeOpts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeOpts", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Removed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Removed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
