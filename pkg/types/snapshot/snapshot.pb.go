// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/types/snapshot/snapshot.proto

package snapshot

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	change "github.com/onosproject/onos-config/pkg/types/change"
	github_com_onosproject_onos_topo_pkg_northbound_device "github.com/onosproject/onos-topo/pkg/northbound/device"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status is the status of a configuration object
type Status int32

const (
	// PENDING indicates the configuration is waiting to be applied
	Status_PENDING Status = 0
	// APPLYING indicates the configuration is in the process of being applied
	Status_APPLYING Status = 1
	// SUCCEEDED indicates the configuration was applied successfully
	Status_SUCCEEDED Status = 2
	// FAILED indicates the configuration failed
	Status_FAILED Status = 3
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "APPLYING",
	2: "SUCCEEDED",
	3: "FAILED",
}

var Status_value = map[string]int32{
	"PENDING":   0,
	"APPLYING":  1,
	"SUCCEEDED": 2,
	"FAILED":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2795dc4c070a10ed, []int{0}
}

// Reason is a failure reason
type Reason int32

const (
	// ERROR indicates an error occurred
	Reason_ERROR Reason = 0
	// UNAVAILABLE indicates the device was unavailable
	Reason_UNAVAILABLE Reason = 1
)

var Reason_name = map[int32]string{
	0: "ERROR",
	1: "UNAVAILABLE",
}

var Reason_value = map[string]int32{
	"ERROR":       0,
	"UNAVAILABLE": 1,
}

func (x Reason) String() string {
	return proto.EnumName(Reason_name, int32(x))
}

func (Reason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2795dc4c070a10ed, []int{1}
}

// Snapshot is a device snapshot
type Snapshot struct {
	// device_id is the device to which the snapshot applies
	DeviceID github_com_onosproject_onos_topo_pkg_northbound_device.ID `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3,casttype=github.com/onosproject/onos-topo/pkg/northbound/device.ID" json:"device_id,omitempty"`
	// status is the snapshot status
	Status Status `protobuf:"varint,2,opt,name=status,proto3,enum=onos.config.snapshot.Status" json:"status,omitempty"`
	// reason is the snapshot failure reason
	Reason Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=onos.config.snapshot.Reason" json:"reason,omitempty"`
	// values is a list of values to set
	Values []*change.Value `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	// timestamp is the time at which to take the snapshot
	Timestamp time.Time `protobuf:"bytes,5,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// created is the time at which the configuration was created
	Created time.Time `protobuf:"bytes,6,opt,name=created,proto3,stdtime" json:"created"`
	// updated is the time at which the configuration was last updated
	Updated time.Time `protobuf:"bytes,7,opt,name=updated,proto3,stdtime" json:"updated"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_2795dc4c070a10ed, []int{0}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

func (m *Snapshot) GetDeviceID() github_com_onosproject_onos_topo_pkg_northbound_device.ID {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *Snapshot) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *Snapshot) GetReason() Reason {
	if m != nil {
		return m.Reason
	}
	return Reason_ERROR
}

func (m *Snapshot) GetValues() []*change.Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Snapshot) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *Snapshot) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Snapshot) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("onos.config.snapshot.Status", Status_name, Status_value)
	proto.RegisterEnum("onos.config.snapshot.Reason", Reason_name, Reason_value)
	proto.RegisterType((*Snapshot)(nil), "onos.config.snapshot.Snapshot")
}

func init() { proto.RegisterFile("pkg/types/snapshot/snapshot.proto", fileDescriptor_2795dc4c070a10ed) }

var fileDescriptor_2795dc4c070a10ed = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0xad, 0x66, 0x75, 0x6c, 0x65, 0x7f, 0x8c, 0xe8, 0xc1, 0x0b, 0xc3, 0xce, 0xc6, 0x0e,
	0xa1, 0x30, 0x99, 0x65, 0xbb, 0xec, 0x52, 0x66, 0xd7, 0xde, 0x30, 0x84, 0x2c, 0x28, 0x6b, 0x61,
	0xa7, 0xe1, 0xd8, 0x8a, 0xe3, 0xad, 0xb1, 0x8c, 0x25, 0x17, 0xf6, 0x2d, 0xfa, 0xb1, 0x7a, 0xec,
	0x65, 0xb0, 0x53, 0x36, 0x92, 0x6f, 0xb1, 0xd3, 0xb0, 0xec, 0xb4, 0x0c, 0x4a, 0xa1, 0x27, 0x3f,
	0x96, 0x9e, 0xdf, 0xf3, 0xbe, 0x3c, 0x82, 0xcf, 0x8b, 0xef, 0xa9, 0x23, 0x7e, 0x14, 0x94, 0x3b,
	0x3c, 0x8f, 0x0a, 0xbe, 0x64, 0xe2, 0x5a, 0xe0, 0xa2, 0x64, 0x82, 0xa1, 0x03, 0x96, 0x33, 0x8e,
	0x63, 0x96, 0x2f, 0xb2, 0x14, 0xef, 0xee, 0xfa, 0x76, 0xca, 0x58, 0x7a, 0x46, 0x1d, 0xe9, 0x99,
	0x57, 0x0b, 0x47, 0x64, 0x2b, 0xca, 0x45, 0xb4, 0x2a, 0x1a, 0xac, 0x7f, 0x90, 0xb2, 0x94, 0x49,
	0xe9, 0xd4, 0xaa, 0x3d, 0x7d, 0x9f, 0x66, 0x62, 0x59, 0xcd, 0x71, 0xcc, 0x56, 0x4e, 0x9d, 0x5b,
	0x94, 0xec, 0x1b, 0x8d, 0x85, 0xd4, 0xaf, 0x9a, 0x19, 0xce, 0xcd, 0x4a, 0xf1, 0x32, 0xca, 0x53,
	0xda, 0x7e, 0x9a, 0x84, 0x17, 0x3f, 0x3b, 0x50, 0x9b, 0xb5, 0x5b, 0xa0, 0x05, 0xd4, 0x13, 0x7a,
	0x9e, 0xc5, 0xf4, 0x6b, 0x96, 0x98, 0x60, 0x00, 0x86, 0xba, 0x17, 0x6e, 0xd6, 0xb6, 0xe6, 0xcb,
	0xc3, 0xd0, 0xff, 0xbb, 0xb6, 0xdf, 0xdd, 0x35, 0x51, 0xb0, 0x82, 0xc9, 0x79, 0x39, 0x2b, 0xc5,
	0x72, 0xce, 0xaa, 0x3c, 0x71, 0x9a, 0x40, 0x1c, 0xfa, 0x44, 0x6b, 0x64, 0x98, 0xa0, 0xb7, 0x50,
	0xe5, 0x22, 0x12, 0x15, 0x37, 0xf7, 0x06, 0x60, 0xf8, 0x78, 0xf4, 0x0c, 0xdf, 0x56, 0x0a, 0x9e,
	0x49, 0x0f, 0x69, 0xbd, 0x35, 0x55, 0xd2, 0x88, 0xb3, 0xdc, 0xec, 0xdc, 0x45, 0x11, 0xe9, 0x21,
	0xad, 0x17, 0xbd, 0x86, 0xea, 0x79, 0x74, 0x56, 0x51, 0x6e, 0x3e, 0x18, 0x74, 0x86, 0xbd, 0xd1,
	0xd3, 0xff, 0xa8, 0xb6, 0x8b, 0xd3, 0xda, 0x41, 0x5a, 0x23, 0xf2, 0xa0, 0x7e, 0x5d, 0xbf, 0xb9,
	0x3f, 0x00, 0xc3, 0xde, 0xa8, 0x8f, 0x9b, 0x07, 0xc2, 0xbb, 0x07, 0xc2, 0x9f, 0x77, 0x0e, 0x4f,
	0xbb, 0x5c, 0xdb, 0xca, 0xc5, 0x6f, 0x1b, 0x90, 0x1b, 0x0c, 0x1d, 0xc1, 0x6e, 0x5c, 0xd2, 0x48,
	0xd0, 0xc4, 0x54, 0xef, 0x91, 0xb0, 0x83, 0x6a, 0xbe, 0x2a, 0x12, 0xc9, 0x77, 0xef, 0xc3, 0xb7,
	0xd0, 0xe1, 0x11, 0x54, 0x9b, 0xfa, 0x50, 0x0f, 0x76, 0xa7, 0xc1, 0xc4, 0x0f, 0x27, 0x1f, 0x0d,
	0x05, 0x3d, 0x84, 0x9a, 0x3b, 0x9d, 0x8e, 0xbf, 0xd4, 0x7f, 0x00, 0x3d, 0x82, 0xfa, 0xec, 0xe4,
	0xf8, 0x38, 0x08, 0xfc, 0xc0, 0x37, 0xf6, 0x10, 0x84, 0xea, 0x07, 0x37, 0x1c, 0x07, 0xbe, 0xd1,
	0x39, 0x7c, 0x09, 0xd5, 0xa6, 0x48, 0xa4, 0xc3, 0xfd, 0x80, 0x90, 0x4f, 0xc4, 0x50, 0xd0, 0x13,
	0xd8, 0x3b, 0x99, 0xb8, 0xa7, 0x6e, 0x38, 0x76, 0xbd, 0x71, 0x60, 0x00, 0xcf, 0xbc, 0xdc, 0x58,
	0xe0, 0x6a, 0x63, 0x81, 0x3f, 0x1b, 0x0b, 0x5c, 0x6c, 0x2d, 0xe5, 0x6a, 0x6b, 0x29, 0xbf, 0xb6,
	0x96, 0x32, 0x57, 0xe5, 0x9a, 0x6f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x02, 0x89, 0x23, 0xd8,
	0x12, 0x03, 0x00, 0x00,
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSnapshot(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSnapshot(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintSnapshot(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSnapshot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Reason != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceID) > 0 {
		i -= len(m.DeviceID)
		copy(dAtA[i:], m.DeviceID)
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.DeviceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapshot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSnapshot(uint64(m.Status))
	}
	if m.Reason != 0 {
		n += 1 + sovSnapshot(uint64(m.Reason))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovSnapshot(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovSnapshot(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovSnapshot(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovSnapshot(uint64(l))
	return n
}

func sovSnapshot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = github_com_onosproject_onos_topo_pkg_northbound_device.ID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= Reason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &change.Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSnapshot
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot   = fmt.Errorf("proto: integer overflow")
)
